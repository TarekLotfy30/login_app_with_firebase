# The following options enforce certain coding practices to ensure code
# quality and consistency

# Flutter Lint Configuration
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # When you pick a style, you should stick to it in the whole project.
    #For smaller projects: prefer_relative_imports might be sufficient due
    # to the smaller codebase and ease of understanding the structure.
    # file.dart';
    #For larger projects: always_use_package_imports can provide better
    #clarity for developers unfamiliar with the project structure.
    # import 'package:my_package/file.dart';
    # With any style, additionally use all of these:
    #avoid_relative_lib_imports
    #directives_ordering
    - prefer_relative_imports
    - avoid_relative_lib_imports
    - directives_ordering
    - lines_longer_than_80_chars
    - unnecessary_getters_setters
    - unnecessary_new
    - avoid_print
    - avoid_unnecessary_containers
    - avoid_web_libraries_in_flutter
    - always_declare_return_types
    - no_logic_in_create_state
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - sized_box_for_whitespace
    - sort_child_properties_last
    - use_build_context_synchronously
    - use_full_hex_values_for_flutter_colors
    - use_key_in_widget_constructors
    - curly_braces_in_flow_control_structures
    - always_put_control_body_on_new_line
    - annotate_overrides
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_return_types_on_setters
    - avoid_renaming_method_parameters
    - avoid_returning_null_for_void
    - avoid_setters_without_getters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_as_parameter_names
    - avoid_types_on_closure_parameters
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - close_sinks
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - hash_and_equals
    - implementation_imports
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    - literal_only_boolean_expressions
    - matching_super_parameters
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    - no_literal_bool_comparisons
    - no_runtimeType_toString
    - no_self_assignments
    - no_wildcard_variable_uses
    - non_constant_identifier_names
    - noop_primitive_operations
    - collection_methods_unrelated_type
    - combinators_ordering
    - comment_references
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - control_flow_in_finally

    - depend_on_referenced_packages
    - deprecated_consistency
    - deprecated_member_use_from_same_package
    - discarded_futures
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    # @Deprecated("""
    # [ oldFunction ] is being deprecated in favor of [newFunction] (with
    # slightly different parameters; see
    # [newFunction] for more information).
    # [oldFunction] will be removed on or after the 4.0.0 release.""")
    # void oldFunction(arg1, arg2) {}
    - provide_deprecation_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_function_declarations_over_variables
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    # class MyClass {
    #   final String name;
    #   MyClass(String name): name = name; // bad
    #   MyClass(this.name); // good
    #  }
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_mixin
    - recursive_getters
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_literal_in_constant_pattern
    #- unawaited_futures
    - unnecessary_await_in_return
    - type_init_formals
    - unnecessary_breaks
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_brace_in_string_interps
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_library_directive
    - unnecessary_null_aware_assignments
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - unreachable_from_main
    - unrelated_type_equality_checks
    - unsafe_html
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    # int? _i; // BAD  or late int _i; // GOOD
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_string_in_part_of_directives
    - use_super_parameters
    - use_to_and_as_if_applicable
    - use_test_throws_matchers
    - valid_regexps
    - require_trailing_commas
    - sized_box_shrink_expand
    # Although Dart supports two syntaxes of doc comments (/// and /**),
    # it is preferred to use /// for doc comments
    - dangling_library_doc_comments
    - slash_for_doc_comments
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - throw_in_finally